"""
Assign a concreate product to the named input of a given factory.
"""
type AssignInputs {
    factory: Factory
}

type Attribute {
    name: String
    value: String
    kind: AttributeKind
}

enum AttributeKind {
    String
    Int
    Float
    Date
}

"""
An input for a factory
"""
type Binding implements Node {
    id: ID!
    name: String!
    protocol: String!
    product: Product
    factory: Factory!
}

"""
An input to specify a particular product to be assigned to the input
of a factory.
"""
input BindingAssignment {
    name: String!
    product: ID!
}

"""
The primary actor of our flows. Responsible for taking data in that
matches a particular protocol and results in a concrete product
"""
type Factory implements Node {
    id: ID!
    name: String!
    inputs: [Binding!]!
    outputs: [Result!]!
    config: [KVPair!]!
    position: Position!
    attributes: [Attribute!]!
}

type Flo implements Node {
    id: ID!
    fixed: Boolean
    factories: [Factory!]!
    products: [Product!]!
}

"""
A generic key/value object to store shapeless meta data and config
"""
type KVPair {
    key: String!
    value: String!
    kind: String!
}

"""
A generic key/value object to store shapeless meta data and config
"""
input KVPairInput {
    key: String!
    value: String!
}

"""
Move the location for a product to a specific x,y coordinate
"""
type MoveFactoryOutput {
    factory: Factory
}

"""
Move the location for a product to a specific x,y coordinate
"""
type MoveProductOutput {
    product: Product
}

input AddProductInput {
    product: ID!
    flo: ID!
    x: Int!
    y: Int!
}

type AddProductOutput {
    product: Product
}

type Mutation {
    moveProduct(product: ID!, x: Int!, y: Int!): MoveProductOutput
    moveFactory(factory: ID!, x: Int!, y: Int!): MoveFactoryOutput
    addProductToFlo(input: AddProductInput!): AddProductOutput!
}

"""
An interface for objects that can be looked up by a globally unique ID
"""
interface Node {
    id: ID!
}

type Position {
    x: Int
    y: Int
}

"""
A concrete result of running a specific factory
"""
type Product implements Node {
    id: ID!
    source: Factory
    name: String!
    description: String
    bindings: [Binding!]!
    position: Position!
    progress: Float!
    attributes: [Attribute!]!
}

type Query {
    node(id: ID!): Node
    products: [Product!]!
    factories: [Factory!]!
}

type Subscription {
    node(id: ID!): Node
}

"""
A named result that was created from a factory
"""
type Result {
    name: String!
    product: Product!
    id: ID!
}

"""
Update the config of a factory
"""
type UpdateFactoryConfig {
    factory: Factory
}
